install.packages('tidyverse')
library(tidyr)
library('ggplot2')
data(diamonds)
#This is how I wrote it
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point() +
xlim(quantile(diamonds$carat, c(0.00, 0.99))) +
ylim(quantile(diamonds$price, c(0.00, 0.99)))
#This is the video solution
qplot(data=diamonds, x=carat, y=price,
xlim=c(0, quantile(diamonds$carat, 0.99)),
ylim=c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill=I('#F79420'), color=I('black'), shape=21)
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages("scales")
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
install.packages("plyr")
plot1 <- qplot(data=diamonds, x=price, geom='histogram', binwidth=100, fill=I('#0990D9')) +
ggtitle('Price')
plot2 <- qplot(data=diamonds, x=price, geom='histogram', binwidth=0.01, fill=I('#F79420')) +
coord_trans(x='log10') +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, nrow=1, ncol=2)
library(gridExtra)
grid.arrange(plot1, plot2, nrow=1, ncol=2)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
View(cuberoot_trans)
View(cuberoot_trans)
?trans_new
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(gridExtra)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(scales)
install.packages('scales')
install.packages("scales")
library(scales)
library(Scales)
library(scales)
install.packages('scales')
install.packages("scales")
library(scales)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(ggplot2)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
rm(diamonds)
rm(plot1)
rm(plot2)
rm(cuberoot_trans)
path()
getwd
getwd()
setwd()
getwd()
setwd('~\GitHub\Explore-and-Summarize-Data')
setwd('.\GitHub\Explore-and-Summarize-Data')
setwd('~/GitHub/Explore-and-Summarize-Data')
getwd()
library(ggplot2)
# Load the Data
load('prosperLoanData.csv')
# Load the Data
loans <- read('prosperLoanData.csv')
?read.csv2
# Load the Data
loans <- read.csv('prosperLoanData.csv')
?require
summary(pf$year_joined)
summary(loans$LoanStatus)
table(loans$LoanStatus)
hist(loans$LoanStatus)
summary(loans$LoanStatus)
summary(loans$ListingCategory.)
summary(loans$ListingCategory)
# Transform ListingCategory to a Factor
loans$ListingKey <- loans$ListingKey.factor
# Load the Data
loans <- read.csv('prosperLoanData.csv')
# Transform ListingCategory to a Factor
loans$ListingKey.factor <- loans$ListingKey
loans$ListingCategory <- factor(loans$ListingCategory..numeric.)
View(loans)
# Transform ListingCategory to a Factor
rm(loans$ListingKey.factor)
# Transform ListingCategory to a Factor
rm('loans$ListingKey.factor')
# Transform ListingCategory to a Factor
loans$ListingKey.factor <- NULL
loans$ListingCategory <- factor(loans$ListingCategory..numeric.,
labels = c("Not Available",
"Debt Consolidation", "Home Improvement", "Business", "Personal Loan",
"Student Use", "Auto", "Other", "Baby&Adoption", "Boat", "Cosmetic Procedure",
"Engagement Ring", "Green Loans", "Household Expenses", "Large Purchases",
"Medical/Dental", "Motorcycle", "RV", "Taxes", "Vacation", "Wedding Loans"))
summary(loans$ListingCategory)
summary(oans$ListingCategory..numeric.)
summary(loans$ListingCategory..numeric.)
table(loans$ListingCategory..numeric.)
table(loans$ListingCategory..numeric.)
summary(loans$ListingCategory)
summary(loans$ListingCategory)
# Transform ListingCategory to a Factor
loans$ListingCategory <- factor(loans$ListingCategory..numeric.,
labels = c("Not Available",
"Debt Consolidation", "Home Improvement", "Business", "Personal Loan",
"Student Use", "Auto", "Other", "Baby&Adoption", "Boat", "Cosmetic Procedure",
"Engagement Ring", "Green Loans", "Household Expenses", "Large Purchases",
"Medical/Dental", "Motorcycle", "RV", "Taxes", "Vacation", "Wedding Loans"))
summary(loans$ListingCreationDate)
hist(loans$ListingCreationDate)
hist(asNumeric(loans$ListingCreationDate)
hist(asNumeric(loans$ListingCreationDate))
hist(loans$ListingCreationDate.asNumeric())
hist(as.numeric(loans$ListingCreationDate))
?cut
barplot(loans$LoanStatus)
?barplot
barplot(summary(loans$LoanStatus))
barplot(table(loans$LoanStatus))
barplot(table(loans$LoanStatus), xpd=FALSE)
barplot(table(loans$LoanStatus), legend=TRUE)
barplot(table(loans$LoanStatus), legend=TRUE, las=2)
barplot(table(loans$LoanStatus), las=2)
barplot(table(loans$LoanStatus), las=2, margin=c(15,4,4,2))
barplot(table(loans$LoanStatus), las=2, mar=c(15,4,4,2))
barplot(table(loans$LoanStatus), las=2, par(mar=c(15,4,4,2)))
?par
barplot(table(loans$LoanStatus), par(las=2, mar=c(15,4,4,2)))
barplot(table(loans$LoanStatus), par(mar=c(15,4,4,2)))
barplot(table(loans$LoanStatus), mar=c(15,4,4,2))
barplot(table(loans$LoanStatus), las=2, mar=c(15,4,4,2))
par(mar=c(15,4,4,2))
barplot(table(loans$LoanStatus), las=2)
?barplot
barplot(table(loans$LoanStatus), las=2, par(mar=c(16,4,4,2)))
barplot(height=table(loans$LoanStatus), las=2, par(mar=c(16,4,4,2)))
barplot(height=summary(loans$LoanStatus), las=2, par(mar=c(16,4,4,2)))
barplot(height=table(loans$LoanStatus), las=2, par(mar=c(16,4,4,2)))
?aggregate
barplot(height=table(loans$LoanStatus), las=2)
hist(loans$Investors)
summary(loans$Investors)
boxplot(loans$Investors)
dist(loans$Investors)
bowplot(loans$Investors)
boxplot(loans$Investors)
hist(loans$Investors)
hist(log10(loans$Investors))
hist(log10(loans$Investors), bin=0.1)
hist(log10(loans$Investors), binsize=0.1)
hist(log10(loans$Investors), breaks=seq(0, 4, by=.025))
hist(log10(loans$Investors), breaks=seq(0, 4, by=0.25))
summary(loans$Investors)
hist(log10(loans$Investors), breaks=seq(0, 3, by=0.25))
hist(log10(loans$Investors), breaks=seq(0, 4, by=0.25))
hist(log10(loans$Investors), breaks=seq(0, 3.25, by=0.25))
table(loans$Investors)
table(loans$Investors, breaks=seq(1, 1200, by=100))
table(loans$Investors, breaks=seq(0, 1200, by=100))
hist(loans$Investors, breaks=seq(0, 1200, by=10))
hist(loans$Investors, breaks=seq(1, 1200, by=10))
hist(loans$Investors, breaks=seq(2, 1200, by=10))
hist(loans$Investors, breaks=seq(1, 1200, by=10))
hist(loans$Investors, breaks=seq(0, 1200, by=10))
hist(loans$Investors, breaks=seq(1, 1200, by=10))
hist(loans$Investors, breaks=seq(0, 1200, by=10))
#summary(loans$ListingCategory)
barplot(height=table(loans$ListingCategory), las=2)
?barplot
#summary(loans$ListingCategory)
barplot(height=table(loans$ListingCategory), las=2, horiz=TRUE)
#summary(loans$ListingCategory)
op <- par(mar = c(10,4,4,2) + 0.1)
barplot(height=table(loans$ListingCategory), las=2, horiz=TRUE)
#summary(loans$ListingCategory)
op <- par(mar = c(16,4,4,2) + 0.1)
barplot(height=table(loans$ListingCategory), las=2, horiz=TRUE)
?mar
?par
#summary(loans$ListingCategory)
op <- par(mar = c(5,8,4,2) + 0.1)
barplot(height=table(loans$ListingCategory), las=2, horiz=TRUE)
barplot(height=table(loans$ListingCategory), horiz=TRUE)
barplot(height=table(loans$ListingCategory), las=2, horiz=TRUE)
#summary(loans$ListingCategory)
op <- par(mar = c(5,8,4,2) + 0.5)
barplot(height=table(loans$ListingCategory), las=2, horiz=TRUE)
?barplot
#barplot(height=table(loans$LoanStatus), las=2)
ggplot(loans, aes(x=loans$LoanStatus)) + geom_bar()
#barplot(height=table(loans$LoanStatus), las=2)
ggplot(loans, aes(x=loans$LoanStatus)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=0))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=3))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=2))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=0.5))
?theme
?element_text
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=0.5, vjust=0.5))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.5))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.2))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.0))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.2))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=axis.text.x.lineheight/2))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
scale_y_continuous(labels=percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
?scale_y_continuous
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
scale_y_continuous(trans = scales::percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
scale_y_continuous(trans = scales::percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_barlabels
ggplot(loans, aes(x=loans$ListingCategory)) +
geom_bar() +
scale_y_continuous(labels = percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory, y=..count..)) +
geom_bar() +
scale_y_continuous(labels = percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory, y=..count../n)) +
geom_bar() +
scale_y_continuous(labels = percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory, y=..count../n, n=nrow(loans))) +
geom_bar() +
scale_y_continuous(labels = percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
?..count..
ggplot(loans, aes(x=loans$ListingCategory, y=..count../n, n=nrow(loans))) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
ggplot(loans, aes(x=loans$ListingCategory, y=..count../n, n=nrow(loans))) +
geom_bar() +
scale_y_continuous(labels = percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4))
?labs
ggplot(loans, aes(x=loans$ListingCategory, y=..count../n, n=nrow(loans))) +
geom_bar() +
scale_y_continuous(labels = percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4)) +
labs(x='Listing Category',
y='Percent of Listings')
ggplot(loans, aes(x=loans$ListingCategory, y=..count../n, n=nrow(loans))) +
geom_bar() +
scale_y_continuous(labels = percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4)) +
labs(title='Listing Category',
x=NULL,
y='Percent of Listings')
ggplot(loans, aes(x=loans$IncomeRange, y=..count../n, n=nrow(loans))) +
geom_bar() +
scale_y_continuous(labels = percent) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4)) +
labs(title='Listing Category',
x=NULL,
y='Percent of Listings')
?scale_x_discrete
levels(loans$IncomeRange)
ggplot(loans, aes(x=loans$IncomeRange, y=..count../n, n=nrow(loans))) +
geom_bar() +
scale_y_continuous(labels = percent) +
scale_x_discrete(limits=c('Not displayed', 'Not employed', '$0', '$1-24,999',
'$25,000-49,999', '$50,000-74,999',
'$75,000-99,999', '$100,000+'))
ggplot(loans, aes(x=loans$IncomeRange, y=..count../n, n=nrow(loans))) +
geom_bar() +
scale_y_continuous(labels = percent) +
scale_x_discrete(limits=c('Not displayed', 'Not employed', '$0', '$1-24,999',
'$25,000-49,999', '$50,000-74,999',
'$75,000-99,999', '$100,000+')) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4)) +
labs(title='Income Levels of Listings',
x=NULL,
y='Percent of Listings')
rm(op)
?avg
?average
?mean
summary(loan$PercentFunded)
summary(loans$PercentFunded)
hist(loans$LoanOriginalAmount)
boxplot(loans$LoanOriginalAmount)
summary(loans$LoanOriginalAmount)
#summary(loans$LoanOriginalAmount)
geom_boxplot(loans$LoanOriginalAmount)
#summary(loans$LoanOriginalAmount)
ggplot(loans) +
geom_boxplot()
#summary(loans)
ggplot(loans, aes(x=LoanOriginalAmount)) +
geom_boxplot()
#summary(loans)
ggplot(loans, aes(x=LoanOriginalAmount)) +
stat_boxplot()
#summary(loans)
ggplot(loans$LoanOriginalAmount) +
stat_boxplot()
#summary(loans)
ggplot(loans, aes(x=LoanOriginalAmount) +
#summary(loans)
ggplot(loans, aes(x=LoanOriginalAmount)) +
stat_boxplot()
#summary(loans)
ggplot(loans, aes(x=LoanOriginalAmount, y=..count..)) +
ggplot(loans, aes(x=LoanOriginalAmount, y=..count..)) +
stat_boxplot()
ggplot(loans, aes(y=LoanOriginalAmount)) +
stat_boxplot()
ggplot(loans, aes(x=LoanOriginalAmount)) +
geom_boxplot()
geom_boxplot(loans, aes(x=LoanOriginalAmount))
geom_boxplot(data=loans, mapping=aes(x=LoanOriginalAmount))
ggplot() +
geom_boxplot(data=loans, mapping=aes(x=LoanOriginalAmount))
ggplot(loans, aes(x=LoanOriginalAmount, y=1)) +
geom_boxplot()
ggplot(loans, aes(x=1, y=LoanOriginalAmount)) +
geom_boxplot()
ggplot(loans, aes(x=1, y=LoanOriginalAmount)) +
geom_boxplot() +
geom_jitter(width = 0.2)
ggplot(loans, aes(x=1, y=LoanOriginalAmount)) +
geom_boxplot()
ggplot(loans, aes(x=1, y=LoanOriginalAmount)) +
geom_boxplot(outlier.color='red')
?boxplot.stats
boxplot(loans$LoanOriginalAmount)
?boxplot
hist(loans$LoanOriginalAmount)
hist(log10(loans$LoanOriginalAmount))
#hist(log10(loans$LoanOriginalAmount))
summary(loans$LoanOriginalAmount)
ggplot(loans, aes(x=loans$IncomeRange, y=..count../n, n=nrow(loans))) +
geom_bar() +
scale_y_continuous(labels = percent) +
scale_x_discrete(limits=c('Not displayed', 'Not employed', '$0', '$1-24,999',
'$25,000-49,999', '$50,000-74,999',
'$75,000-99,999', '$100,000+')) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=0.4)) +
labs(title='Income Levels of Listings',
x=NULL,
y='Percent of Listings')
